// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  firstName String?
  lastName  String?
  phone     String?
  password  String?
  role      Role    @relation(fields: [roleId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  roleId    Int
  sign      Bytes?
  contact   Contact @relation(fields: [contactId], references: [id])
  contactId Int

  createDate DateTime @default(now())
  updateDate DateTime @updatedAt
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]
}

model Contact {
  id       Int         @id @default(autoincrement())
  type     ContactType @relation(fields: [typeId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  typeId   Int
  name     String
  company  Company?    @relation(fields: [taxId], references: [taxId], onDelete: Restrict, onUpdate: Cascade)
  taxId    String?
  branchId String?

  isCustomer Boolean @default(true)
  isSeller   Boolean @default(false)
  credit     Int     @default(0)

  nameForeign String?

  contactPerson String?
  contactPhone  String?
  contactEmail  String?

  address         String?
  addressForeign  String?
  shippingAddress String?
  phone           String?
  phone2          String?
  fax             String?
  email           String?
  websites        String?

  bankId      Int?
  bankNo      String?
  bankBranch  String?
  accountType Int?
  qrCode      Bytes?

  createDate DateTime @default(now())
  updateDate DateTime @updatedAt

  Invoice  Invoice[]
  Project  Project[]
  users    User[]
  Expenses Expenses[]
}

model Company {
  taxId       String    @id
  name        String
  nameForeign String?
  address     String?
  remark      String?
  contact     Contact[]

  createDate DateTime @default(now())
  updateDate DateTime @updatedAt
}

model ContactType {
  id      Int       @id @default(autoincrement())
  name    String // Individual, Partnership, Corporation
  contact Contact[]
}

model Invoice {
  no              String   @id @default("INVYYYYMM-CCCC")
  po              String?
  nonVatTotal     Decimal  @default(0.00)
  netTotal        Decimal  @default(0.00)
  credit          Int      @default(0)
  contact         Contact  @relation(fields: [contactId], references: [id])
  project         Project? @relation(fields: [projectId], references: [id])
  date            DateTime @default(now())
  address         String?
  shippingAddress String?
  remark          String?
  internalRemark  String?
  created         Boolean  @default(false)

  contactId     Int
  scanDoc       DocImage[]
  InvoiceDetail InvoiceDetail[]
  createDate    DateTime        @default(now())
  updateDate    DateTime        @updatedAt
  InvoiceStatus InvoiceStatus[]

  BillingNote BillingNote? @relation(fields: [billingNoteNo], references: [no])
  Receipt     Receipt?     @relation(fields: [receiptNo], references: [no])
  CashInvoice CashInvoice? @relation(fields: [cashInvoiceNo], references: [no])

  billingNoteNo String?
  receiptNo     String?
  cashInvoiceNo String? @unique
  projectId     Int?
}

model Expenses {
  no             String   @id @default("EXPYYYYMM-CCCC")
  po             String?
  ref            String?
  Contact        Contact  @relation(fields: [contactId], references: [id])
  credit         Int      @default(0)
  date           DateTime @default(now())
  remark         String?
  internalRemark String?
  vatTotal       Decimal  @default(0)
  discount       Decimal  @default(0)
  netTotal       Decimal  @default(0)

  Payment Payment? @relation(fields: [paymentId], references: [id])
  Project Project? @relation(fields: [projectId], references: [id])

  contactId       Int
  projectId       Int?
  paymentId       Int?              @unique
  ExpensesDetail  ExpensesDetail[]
  ExpensesInvoice ExpensesInvoice[]
}

model ExpensesDetail {
  order              Int
  Expense            Expenses         @relation(fields: [expenseNo], references: [no])
  expenseNo          String
  detail             String
  category           ExpensesCategory @relation(fields: [expensesCategoryId], references: [id])
  amount             Decimal          @default(1)
  unit               String?
  price              Decimal
  expensesCategoryId Int

  @@unique([order, expenseNo])
}

model ExpensesInvoice {
  Expense     Expenses @relation(fields: [expensesNo], references: [no])
  expensesNo  String   @id
  invoiceNo   String
  invoiceDate DateTime
  contactName String
  taxID       String
  branchNo    String   @default("00000")
  file        Bytes?
}

model ExpensesCategory {
  id       Int               @id @default(autoincrement())
  name     String
  parentId Int?
  parent   ExpensesCategory? @relation("CategoryParent", fields: [parentId], references: [id])

  ExpensesDetail   ExpensesDetail[]
  ExpensesCategory ExpensesCategory[] @relation("CategoryParent")
}

model Project {
  id         Int      @id @default(autoincrement())
  name       String
  contact    Contact? @relation(fields: [contactId], references: [id])
  contactId  Int?
  createDate DateTime @default(now())
  updateDate DateTime @updatedAt

  Invoice  Invoice[]
  Expenses Expenses[]
}

model InvoiceStatus {
  id                  Int               @id @default(autoincrement())
  invoice             Invoice           @relation(fields: [invoiceNo], references: [no])
  status              InvoiceStatusType @relation(fields: [invoiceStatusTypeId], references: [id])
  createDate          DateTime          @default(now())
  invoiceStatusTypeId Int               @default(1)
  invoiceNo           String
}

model InvoiceStatusType {
  id            Int             @id @default(autoincrement())
  name          String          @unique @default("Awaiting")
  InvoiceStatus InvoiceStatus[]
  // Invoice
  // Awaiting, Payment Due, Receipt created, Void
}

model InvoiceDetail {
  id        Int     @id @default(autoincrement())
  invoice   Invoice @relation(fields: [invoiceNo], references: [no])
  product   Product @relation(fields: [productId], references: [id])
  name      String  @default("")
  price     Decimal @default(1)
  amount    Decimal @default(1)
  vat       Boolean @default(false)
  discount  Int     @default(0)
  invoiceNo String
  productId Int
}

model BillingNote {
  no                String              @id @default("BLYYYYMM-CCCC")
  createDate        DateTime            @default(now())
  credit            Int                 @default(0)
  showCredit        Boolean             @default(true)
  remark            String?
  internalRemark    String?
  BillingNoteStatus BillingNoteStatus[]
  invoices          Invoice[]

  scanDoc DocImage[]
}

model BillingNoteStatus {
  id                      Int                   @id @default(autoincrement())
  bill                    BillingNote           @relation(fields: [billingNoteNo], references: [no])
  status                  BillingNoteStatusType @relation(fields: [billingNoteStatusTypeId], references: [id])
  createDate              DateTime              @default(now())
  billingNoteNo           String
  billingNoteStatusTypeId Int                   @default(1)
}

model BillingNoteStatusType {
  id                Int                 @id @default(autoincrement())
  name              String              @unique @default("Awaiting")
  // Billing Note
  // Awaiting, Approved, Receipt created, Void
  BillingNoteStatus BillingNoteStatus[]
}

model Receipt {
  no            String          @id @default("REYYYYMM-CCCC")
  hasInvoice    Boolean         @default(false)
  createDate    DateTime        @default(now())
  ReceiptStatus ReceiptStatus[]
  invoices      Invoice[]

  scanDoc   DocImage[]
  Payment   Payment?   @relation(fields: [paymentId], references: [id])
  paymentId Int?
}

model ReceiptStatus {
  id                  Int               @id @default(autoincrement())
  receipt             Receipt           @relation(fields: [receiptNo], references: [no])
  status              ReceiptStatusType @relation(fields: [receiptStatusTypeId], references: [id])
  createDate          DateTime          @default(now())
  receiptNo           String
  receiptStatusTypeId Int               @default(1)
}

model ReceiptStatusType {
  id            Int             @id @default(autoincrement())
  name          String          @unique @default("Awaiting")
  // Receipt
  // Awaiting, Paid, Void
  ReceiptStatus ReceiptStatus[]
}

model CashInvoice {
  no                String              @id @default("CAYYYYMM-CCCC")
  CashInvoiceStatus CashInvoiceStatus[]
  Invoice           Invoice?
  createDate        DateTime            @default(now())
}

model CashInvoiceStatus {
  id                      Int                   @id @default(autoincrement())
  invoice                 CashInvoice           @relation(fields: [cashInvoiceNo], references: [no])
  status                  CashInvoiceStatusType @relation(fields: [cashInvoiceStatusTypeId], references: [id])
  createDate              DateTime              @default(now())
  cashInvoiceNo           String
  cashInvoiceStatusTypeId Int                   @default(1)
}

model CashInvoiceStatusType {
  id                Int                 @id @default(autoincrement())
  name              String              @unique @default("Awaiting")
  // Cash Invoice
  // Awaiting, Paid, Void
  CashInvoiceStatus CashInvoiceStatus[]
}

model Product {
  id             Int             @id @default(autoincrement())
  name           String
  nameForeign    String?
  code           String?         @unique
  sellingPrice   Decimal         @default(0)
  description    String?
  type           ProductType     @relation(fields: [TypeId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  unit           Unit            @relation(fields: [unitId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  barcode        String?
  category       Category        @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  sellingvat     Boolean         @default(false)
  inventoryTrack Boolean         @default(false)
  TypeId         Int
  unitId         Int
  categoryId     Int
  images         ProductImage[]
  createDate     DateTime        @default(now())
  updateDate     DateTime        @updatedAt
  InvoiceDetail  InvoiceDetail[]
}

model DocImage {
  hash          String
  ref           String
  data          Bytes
  createDate    DateTime     @default(now())
  Invoice       Invoice?     @relation(fields: [invoiceNo], references: [no])
  invoiceNo     String?
  BillingNote   BillingNote? @relation(fields: [billingNoteNo], references: [no])
  billingNoteNo String?
  Receipt       Receipt?     @relation(fields: [receiptNo], references: [no])
  receiptNo     String?

  @@id([hash, ref])
}

model ProductImage {
  hash       String
  productId  Int
  Product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  data       Bytes
  createDate DateTime @default(now())

  @@id([hash, productId])
}

model Unit {
  id          Int       @id @default(autoincrement())
  name        String // กก., กรัม, ตัว
  nameForeign String // Kilogram, Gram, Unit
  Product     Product[]
}

model ProductType {
  id      Int       @id @default(autoincrement())
  name    String // Product, Service
  Product Product[]
}

model Category {
  id      Int       @id @default(autoincrement())
  name    String // Food
  Product Product[]
}

model Bank {
  id          Int           @id @default(autoincrement())
  name        String
  bankAccount bankAccount[]
}

model bankAccount {
  id              Int             @id @default(autoincrement())
  Bank            Bank            @relation(fields: [bankId], references: [id])
  branch          String?
  noAccount       String?
  nameAccount     String?
  BankAccountType BankAccountType @relation(fields: [bankAccountTypeId], references: [id])

  bankId            Int
  bankAccountTypeId Int
  Payment           Payment[]
}

model BankAccountType {
  id          Int           @id @default(autoincrement())
  name        String //Savings, Current, Fixed Deposit
  bankAccount bankAccount[]
}

model Payment {
  id       Int         @id @default(autoincrement())
  type     PaymentType @relation(fields: [typeId], references: [id])
  Receipt  Receipt[]
  Expenses Expenses?
  netTotal Decimal

  chequeDate        DateTime?
  chequeNo          String?
  chequeDepositDate DateTime?
  chequeCashingDate DateTime?

  bankAccount bankAccount? @relation(fields: [bankAccountId], references: [id])

  operatorName  String?
  detail        String?
  remark        String?
  bankAccountId Int?
  typeId        Int
}

model PaymentType {
  id      Int       @id @default(autoincrement())
  name    String // Cash, Bank Transfer, Cheque, EDC, POS, Online Payment, E-Commerce
  Payment Payment[]
}
